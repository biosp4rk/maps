{"version":3,"file":"filter-parser.js","sourceRoot":"","sources":["src/filter-parser.ts"],"names":[],"mappings":"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","sourcesContent":["export enum SearchType {\n  Term,\n  Quote,\n  Regex\n}\n\nexport class FilterItem {\n\n  public text: string;\n  public type: SearchType;\n  public exclude: boolean;\n  public regex: RegExp | null;\n  \n  constructor(type: SearchType, exclude: boolean, text: string = '') {\n    this.text = text;\n    this.type = type;\n    this.exclude = exclude;\n    this.regex = null;\n  }\n\n}\n\nexport class FilterParser {\n\n  private static filter: string;\n  private static index: number;\n  private static items: Array<FilterItem>;\n  private static exclude: boolean;\n\n  public static parse(filter: string): Array<FilterItem> {\n    // setup\n    this.filter = filter;\n    this.initialize();\n    \n    // parse\n    this.parseFilterStart();\n\n    // finalize results\n    for (const item of this.items) {\n      if (item.type === SearchType.Regex) {\n        // create RegExp objects now (avoid making them on the fly later)\n        item.regex = new RegExp(item.text, 'i');\n      } else {\n        // lowercase terms and quotes\n        item.text = item.text.toLowerCase();\n      }\n    }\n    const results = this.items;\n    this.reset();\n    return results;\n  }\n\n  private static initialize() {\n    this.index = 0;\n    this.items = [];\n    this.exclude = false;\n  }\n\n  private static reset() {\n    this.filter = '';\n    this.index = -1;\n    this.items = [];\n    this.exclude = false;\n  }\n\n  private static addToLast(text: string): void {\n    const last = this.items.length - 1;\n    this.items[last].text += text;\n  }\n\n  private static parseFilterStart(): void {\n    if (this.index >= this.filter.length) {\n      return\n    }\n    const c = this.filter[this.index++];\n    if (c === '\"') {\n      this.items.push(new FilterItem(SearchType.Quote, this.exclude));\n      this.parseFilterQuote();\n    } else if (c === '/') {\n      this.items.push(new FilterItem(SearchType.Regex, this.exclude));\n      this.parseFilterRegex();\n    } else if (c === '-') {\n      this.exclude = true;\n      this.parseFilterText();\n    } else if (c === ' ') {\n      this.parseFilterSpace();\n    } else {\n      this.items.push(new FilterItem(SearchType.Term, this.exclude, c));\n      this.parseFilterTerm();\n    }\n  }\n\n  private static parseFilterItem(): void {\n    if (this.index >= this.filter.length) {\n      return\n    }\n    // new item is expected, so check for minus but not space\n    const c = this.filter[this.index++];\n    if (c === '\"') {\n      this.items.push(new FilterItem(SearchType.Quote, this.exclude));\n      this.parseFilterQuote();\n    } else if (c === '/') {\n      this.items.push(new FilterItem(SearchType.Regex, this.exclude));\n      this.parseFilterRegex();\n    } else if (c === '-') {\n      this.exclude = true;\n      this.parseFilterText();\n    } else {\n      this.items.push(new FilterItem(SearchType.Term, this.exclude, c));\n      this.parseFilterTerm();\n    }\n  }\n\n  private static parseFilterText(): void {\n    if (this.index >= this.filter.length) {\n      return\n    }\n    // item text is expected, so don't check for minus or space\n    const c = this.filter[this.index++];\n    if (c === '\"') {\n      this.items.push(new FilterItem(SearchType.Quote, this.exclude));\n      this.parseFilterQuote();\n    } else if (c === '/') {\n      this.items.push(new FilterItem(SearchType.Regex, this.exclude));\n      this.parseFilterRegex();\n    } else {\n      this.items.push(new FilterItem(SearchType.Term, this.exclude, c));\n      this.parseFilterTerm();\n    }\n  }\n\n  private static parseFilterQuote(): void {\n    this.exclude = false;\n    while (this.index < this.filter.length) {\n      const c = this.filter[this.index++];\n      if (c === '\"') {\n        break;\n      }\n      this.addToLast(c);\n    }\n    this.parseFilterSpace();\n  }\n  \n  private static parseFilterRegex(): void {\n    this.exclude = false;\n    let escaped = false;\n    while (this.index < this.filter.length) {\n      const c = this.filter[this.index++];\n      if (c === '/' && !escaped) {\n        break;\n      }\n      if (escaped) {\n        escaped = false;\n      } else if (c === '\\\\') {\n        escaped = true;\n      }\n      this.addToLast(c);\n    }\n    this.parseFilterSpace();\n  }\n  \n  private static parseFilterSpace(): void {\n    while (this.index < this.filter.length && this.filter[this.index] === ' ') {\n      this.index++;\n    }\n    this.parseFilterItem();\n  }\n  \n  private static parseFilterTerm(): void {\n    this.exclude = false;\n    while (this.index < this.filter.length) {\n      const c = this.filter[this.index++];\n      if (c === ' ') {\n        break;\n      }\n      this.addToLast(c);\n    }\n    this.parseFilterSpace();\n  }\n\n}\n"]}