{"version":3,"file":"filter-parser.js","sourceRoot":"","sources":["src/filter-parser.ts"],"names":[],"mappings":"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","sourcesContent":["// Grammar:\n// Space -> /\\s+/\n// Hex -> /[0-9A-F]+/\n// Filter -> FilterItem (Space FilterItem)*\n// FilterItem -> Term | Quote | Regex | Addr\n// Term -> /\\S+/\n// Quote -> '\"' /[^\"]*/ '\"'\n// Regex -> '/' /[^/]*/ '/'\n// Addr -> AddrEQ | AddrGT | AddrLT | AddrGE | AddrLE | AddrNear\n// AddrEQ -> '=' Hex\n// AddrGT -> '>' Hex\n// AddrLT -> '<' Hex\n// AddrGE -> '>=' Hex\n// AddrLE -> '<=' Hex\n// AddrNear -> '~' Hex\n\n\nconst ROM_OFFSET = 0x8000000;\n\nexport enum SearchType {\n  Term,\n  Quote,\n  Regex,\n  AddrEQ,\n  AddrGT,\n  AddrLT,\n  AddrGE,\n  AddrLE,\n  AddrNear\n}\n\nexport class FilterItem {\n\n  public text: string;\n  public type: SearchType;\n  public exclude: boolean;\n  public addr: number | null;\n  public regex: RegExp | null;\n  \n  constructor(type: SearchType, exclude: boolean, text: string = '') {\n    this.text = text;\n    this.type = type;\n    this.exclude = exclude;\n    this.addr = null;\n    this.regex = null;\n  }\n\n}\n\nexport class FilterParser {\n\n  private static filter: string;\n  private static index: number;\n  private static items: Array<FilterItem>;\n  private static exclude: boolean;\n\n  public static parse(filter: string): Array<FilterItem> {\n    // setup\n    this.filter = filter;\n    this.initialize();\n    \n    // parse\n    this.parseFilterStart();\n\n    // finalize results\n    let results: FilterItem[] = [];\n    for (const item of this.items) {\n      switch (item.type) {\n        case SearchType.Regex:\n          // create RegExp objects now (avoid making them on the fly later)\n          item.regex = new RegExp(item.text, 'i');\n          break;\n        case SearchType.AddrEQ:\n        case SearchType.AddrGT:\n        case SearchType.AddrLT:\n        case SearchType.AddrGE:\n        case SearchType.AddrLE:\n        case SearchType.AddrNear:\n          // exclude addr filter if not valid hex\n          if (!/(0x)?[0-9A-Fa-f]+/.test(item.text)) {\n            continue;\n          }\n          item.addr = parseInt(item.text, 16);\n          // check if virtual rom address\n          if (item.addr >= ROM_OFFSET) {\n            item.addr -= ROM_OFFSET;\n          }\n          break;\n        default:\n          // lowercase terms and quotes\n          item.text = item.text.toLowerCase();\n          break;\n      }\n      results.push(item);\n    }\n\n    this.reset();\n    return results;\n  }\n\n  private static initialize() {\n    this.index = 0;\n    this.items = [];\n    this.exclude = false;\n  }\n\n  private static reset() {\n    this.filter = '';\n    this.index = -1;\n    this.items = [];\n    this.exclude = false;\n  }\n\n  private static addToLast(text: string): void {\n    const last = this.items.length - 1;\n    this.items[last].text += text;\n  }\n\n  private static parseFilterStart(): void {\n    if (this.index >= this.filter.length) {\n      return\n    }\n    const c = this.filter[this.index++];\n    if (this.tryParseFilterAddr(c)) {\n      return;\n    }\n    if (c === '-') {\n      this.exclude = true;\n      this.parseFilterText();\n    } else if (c === ' ') {\n      this.parseFilterSpace();\n    } else {\n      this.parseFilterNonAddr(c);\n    }\n  }\n\n  private static tryParseFilterAddr(c: string): boolean {\n    if (this.index >= this.filter.length) {\n      return false;\n    }\n    let searchType: SearchType;\n    if (c === \"=\") {\n      // double equals is also allowed,\n      // so skip second equals if present\n      if (this.filter[this.index] === \"=\") {\n        this.index++;\n      }\n      searchType = SearchType.AddrEQ;\n    } else if (c === \">\") {\n        if (this.filter[this.index] === \"=\") {\n          this.index++;\n          searchType = SearchType.AddrGE;\n        } else {\n          searchType = SearchType.AddrGT;\n        }\n    } else if (c === \"<\") {\n      if (this.filter[this.index] === \"=\") {\n        this.index++;\n        searchType = SearchType.AddrLE;\n      } else {\n        searchType = SearchType.AddrLT;\n      }\n    } else if (c === \"~\") {\n        searchType = SearchType.AddrNear;\n    } else {\n      return false;\n    }\n    // add new filter item\n    const item = new FilterItem(searchType, this.exclude);\n    this.items.push(item);\n    this.parseFilterTerm();\n    return true;\n  }\n\n  private static parseFilterNonAddr(c: string): void {\n    // item text is expected, so don't check for minus or space\n    if (c === '\"') {\n      this.items.push(new FilterItem(SearchType.Quote, this.exclude));\n      this.parseFilterQuote();\n    } else if (c === '/') {\n      this.items.push(new FilterItem(SearchType.Regex, this.exclude));\n      this.parseFilterRegex();\n    } else {\n      this.items.push(new FilterItem(SearchType.Term, this.exclude, c));\n      this.parseFilterTerm();\n    }\n  }\n\n  private static parseFilterItem(): void {\n    if (this.index >= this.filter.length) {\n      return\n    }\n    // new item is expected, so check for minus but not space\n    const c = this.filter[this.index++];\n    if (this.tryParseFilterAddr(c)) {\n      return;\n    }\n    if (c === '-') {\n      this.exclude = true;\n      this.parseFilterText();\n    } else {\n      this.parseFilterNonAddr(c);\n    }\n  }\n\n  private static parseFilterText(): void {\n    if (this.index >= this.filter.length) {\n      return\n    }\n    // item text is expected, so don't check for minus or space\n    const c = this.filter[this.index++];\n    if (this.tryParseFilterAddr(c)) {\n      return;\n    }\n    this.parseFilterNonAddr(c);\n  }\n\n  private static parseFilterQuote(): void {\n    this.exclude = false;\n    while (this.index < this.filter.length) {\n      const c = this.filter[this.index++];\n      if (c === '\"') {\n        break;\n      }\n      this.addToLast(c);\n    }\n    this.parseFilterSpace();\n  }\n  \n  private static parseFilterRegex(): void {\n    this.exclude = false;\n    let escaped = false;\n    while (this.index < this.filter.length) {\n      const c = this.filter[this.index++];\n      if (c === '/' && !escaped) {\n        break;\n      }\n      if (escaped) {\n        escaped = false;\n      } else if (c === '\\\\') {\n        escaped = true;\n      }\n      this.addToLast(c);\n    }\n    this.parseFilterSpace();\n  }\n  \n  private static parseFilterSpace(): void {\n    while (this.index < this.filter.length && this.filter[this.index] === ' ') {\n      this.index++;\n    }\n    this.parseFilterItem();\n  }\n  \n  private static parseFilterTerm(): void {\n    this.exclude = false;\n    while (this.index < this.filter.length) {\n      const c = this.filter[this.index++];\n      if (c === ' ') {\n        break;\n      }\n      this.addToLast(c);\n    }\n    this.parseFilterSpace();\n  }\n\n}\n"]}