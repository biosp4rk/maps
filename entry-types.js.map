{"version":3,"file":"entry-types.js","sourceRoot":"","sources":["src/entry-types.ts"],"names":[],"mappings":"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","sourcesContent":["export {\n  GameVar, GameRelVar, GameAbsVar, GameCode, GameStruct, GameEnumVal, \n  GameStructList, GameEnumList\n};\nimport { toHex, getPrimSize } from \"./utils\";\n\n\nclass GameVar {\n  desc!: string;\n  label!: string;\n  type!: string;\n  tags?: string[];\n  enum?: string;\n  notes?: string;\n\n  /** Gets the number of items (1 unless array type) */\n  getCount(): number {\n    let count = 1;\n    const parts = this.type.split(' ');\n    if (parts.length == 2) {\n      let decl = parts[1];\n      // get inner most part of declaration\n      const i = decl.lastIndexOf('(');\n      if (i != -1) {\n        const j = decl.indexOf(')');\n        decl = decl.slice(i + 1, j);\n      }\n      // check for pointer\n      if (decl.startsWith('*')) {\n        decl = decl.replace(/^\\*+/, '');\n      }\n      // check for array\n      const dims = decl.match(/(0x)?[0-9A-F]+/g);\n      if (dims) {\n        for (const dim of dims) {\n          const radix = dim.startsWith('0x') ? 16 : 10;\n          count *= parseInt(dim, radix);\n        }\n      }\n    }\n    return count;\n  }\n\n  /** Gets the physical size of an individual item */\n  getSize(structs: GameStructList): number {\n    if (this.isPtr()) {\n      return 4;\n    }\n    const spec = this.spec();\n    const primSize = getPrimSize(spec);\n    if (!isNaN(primSize)) {\n      return primSize;\n    }\n    if (spec in structs) {\n      return structs[spec].getSize();\n    }\n    throw new Error('Invalid type specifier ' + spec);\n  }\n\n  /** Gets the total physical size of all items */\n  getLength(structs: GameStructList): number {\n    return this.getCount() * this.getSize(structs);\n  }\n\n  /** Returns the item size and count if count > 1 */\n  getLengthToolTip(structs: GameStructList): string {\n    const count = this.getCount();\n    if (count == 1) {\n      return '';\n    }\n    const size = this.getSize(structs);\n    return 'Size: ' + toHex(size) + '\\nCount: ' + toHex(count);\n  }\n  \n  spec(): string {\n    return this.type.split(' ')[0];\n  }\n\n  private isPtr(): boolean {\n    // get second part of type string\n    const parts = this.type.split(' ');\n    if (parts.length != 2) {\n      return false;\n    }\n    let decl = parts[1];\n    // find inner most part of declaration\n    let i = decl.lastIndexOf('(');\n    if (i == -1) {\n      i = 0;\n    }\n    // check for pointer\n    return decl[i] == '*';\n  }\n}\n\nclass GameRelVar extends GameVar {\n  offset!: string;\n\n  /** Returns the address of this field in item 0 */\n  getOffsetToolTip(parentAddr: number): string {\n    const off = parseInt(this.offset, 16);\n    return 'Address: ' + toHex(parentAddr + off);\n  }\n}\n\nclass GameAbsVar extends GameVar {\n  addr!: string;\n\n  getAddr(): number {\n    return parseInt(this.addr, 16);\n  }\n}\n\nclass GameCode {\n  desc!: string;\n  label!: string;\n  addr!: string;\n  size!: string;\n  mode!: string;\n  params!: GameVar[];\n  return!: GameVar;\n  notes?: string;\n\n  getAddr(): number {\n    return parseInt(this.addr, 16);\n  }\n\n  getSize(): number {\n    return parseInt(this.size, 16);\n  }\n\n  /** Returns where the function ends */\n  getToolTip(): string {\n    const funcEnd = this.getAddr() + this.getSize() - 1;\n    return 'Ends at ' + toHex(funcEnd);\n  }\n\n  getParams(): string {\n    return '';\n  }\n\n  getReturn(): string {\n    return '';\n  }\n}\n\nclass GameEnumVal {\n  desc!: string;\n  label!: string;\n  val!: string;\n  notes?: string;\n}\n\nclass GameStruct {\n  size!: string;\n  vars!: GameRelVar[];\n\n  getSize(): number {\n    return parseInt(this.size, 16);\n  }\n}\n\ntype GameStructList = { [key: string]: GameStruct };\ntype GameEnumList = { [key: string]: GameEnumVal[] };\n"]}