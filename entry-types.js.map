{"version":3,"file":"entry-types.js","sourceRoot":"","sources":["src/entry-types.ts"],"names":[],"mappings":"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","sourcesContent":["export {\n  GameEntry, GameVar, GameRelVar, GameData, GameCode,\n  GameStruct, GameEnumVal, GameEnum, GameStructList, GameEnumList\n};\nimport { toHex } from \"./utils\";\nimport {\n  KEY_ADDR, KEY_COUNT, KEY_DESC, KEY_ENUM, KEY_LABEL, KEY_MODE, KEY_NOTES,\n  KEY_OFF, KEY_PARAMS, KEY_RET, KEY_SIZE, KEY_TAGS, KEY_TYPE, KEY_VAL\n} from \"./headings\";\n\nexport type DictEntry = {[key: string]: unknown};\n\nfunction swap_key_value(obj: any): any {\n  return Object.fromEntries(Object.entries(obj).map(([k, v]) => [v, k]));\n}\n\nexport enum PrimType {\n  U8,\n  S8,\n  Bool,\n  U16,\n  S16,\n  U32,\n  S32,\n  Struct,\n  Void\n}\n\nconst PRIM_TO_STR = {\n  [PrimType.U8]: 'u8',\n  [PrimType.S8]: 's8',\n  [PrimType.Bool]: 'bool',\n  [PrimType.U16]: 'u16',\n  [PrimType.S16]: 's16',\n  [PrimType.U32]: 'u32',\n  [PrimType.S32]: 's32',\n  [PrimType.Struct]: 'struct',\n  [PrimType.Void]: 'void'\n}\n\nconst STR_TO_PRIM = swap_key_value(PRIM_TO_STR);\n\nenum DataTag {\n  Flags,\n  Ascii,\n  Text,\n  Rle,\n  LZ,\n  Gfx,\n  Tilemap,\n  Palette,\n  OamFrame,\n  BGBlocks,\n  BGMap,\n  Thumb,\n  Arm\n}\n\nconst TAG_TO_STR = {\n  [DataTag.Flags]: \"flags\",\n  [DataTag.Ascii]: \"ascii\",\n  [DataTag.Text]: \"text\",\n  [DataTag.Rle]: \"rle\",\n  [DataTag.LZ]: \"lz\",\n  [DataTag.Gfx]: \"gfx\",\n  [DataTag.Tilemap]: \"tilemap\",\n  [DataTag.Palette]: \"palette\",\n  [DataTag.OamFrame]: \"oam_frame\",\n  [DataTag.BGBlocks]: \"bg_blocks\",\n  [DataTag.BGMap]: \"bg_map\",\n  [DataTag.Thumb]: \"thumb\",\n  [DataTag.Arm]: \"arm\"\n}\n\nconst STR_TO_TAG = swap_key_value(TAG_TO_STR);\n\nenum CodeMode {\n  Thumb,\n  Arm\n}\n\nconst MODE_TO_STR = {\n  [CodeMode.Thumb]: \"thumb\",\n  [CodeMode.Arm]: \"arm\",\n}\n\nconst STR_TO_MODE = swap_key_value(MODE_TO_STR);\n\nabstract class GameEntry {\n  sortValue(): number {\n    throw new Error('Unsupported');\n  }\n}\n\nclass GameVar extends GameEntry {\n  desc!: string;\n  label!: string;\n  arrCount?: number;\n  tags?: DataTag[];\n  enum?: string;\n  notes?: string;\n  // used for type\n  primitive!: PrimType;\n  structName?: string;\n  declaration?: string;\n\n  constructor(entry: DictEntry) {\n    super();\n    this.desc = entry[KEY_DESC] as string;\n    this.label = entry[KEY_LABEL] as string;\n    this.parseType(entry[KEY_TYPE] as string);\n    const arrCount = entry[KEY_COUNT] as string;\n    this.arrCount = arrCount ? parseInt(arrCount) : undefined;\n    this.tags = (entry[KEY_TAGS] as string[])?.map((t: string) => STR_TO_TAG[t]);\n    this.enum = entry[KEY_ENUM] as string;\n    this.notes = entry[KEY_NOTES] as string;\n  }\n\n  /** Gets the number of items (1 unless array type) */\n  getCount(): number {\n    return this.arrCount ?? 1;\n  }\n\n  getSpecSize(structs: GameStructList) : number {\n    switch (+this.primitive) {\n      case PrimType.U8:\n      case PrimType.S8:\n      case PrimType.Bool:\n      case PrimType.Void:\n        return 1;\n      case PrimType.U16:\n      case PrimType.S16:\n        return 2\n      case PrimType.U32:\n      case PrimType.S32:\n        return 4;\n      case PrimType.Struct:\n        const se = structs[this.structName!];\n        if (se === undefined) {\n          throw new Error(`Invalid struct name ${this.structName}`);\n        }\n        return se.size;\n    }\n    return NaN;\n  }\n\n  /** Gets the physical size of an individual item */\n  getSize(structs: GameStructList): number {\n    let size = this.getSpecSize(structs);\n    if (!this.declaration) {\n      return size;\n    }\n    // get inner-most part of declaration\n    let decl = this.declaration;\n    let i = decl.lastIndexOf('(');\n    if (i !== -1) {\n      i++;\n      const j = decl.indexOf(')');\n      decl = decl.slice(i, j);\n    }\n    // check for pointer\n    if (decl.startsWith('*')) {\n      size = 4;\n      decl = decl.replace(/^\\*+/, '');\n    }\n    // check for array\n    const matches = decl.match(/\\w+/g);\n    if (matches) {\n      for (const match of matches) {\n        size *= parseInt(match, 16);\n      }\n    }\n    return size;\n  }\n\n  /** Gets the total physical size of all items */\n  getLength(structs: GameStructList): number {\n    return this.getCount() * this.getSize(structs);\n  }\n\n  /** Returns the item size and count if count > 1 */\n  getLengthToolTip(structs: GameStructList): string {\n    const count = this.getCount();\n    if (count == 1) {\n      return '';\n    }\n    const size = this.getSize(structs);\n    return 'Size: ' + toHex(size) + '\\nCount: ' + toHex(count);\n  }\n  \n  spec(): string {\n    if (this.primitive === PrimType.Struct) {\n      return this.structName!;\n    }\n    return PRIM_TO_STR[this.primitive];\n  }\n\n  tagStrs(): string[] | undefined {\n    return this.tags?.map(t => TAG_TO_STR[t]);\n  }\n\n  typeStr(): string {\n    let decl = this.declaration ?? '';\n    if (this.arrCount) {\n      let i = decl.lastIndexOf('*') + 1;\n      const arrStr = '[0x' + toHex(this.arrCount) + ']'\n      decl = decl.slice(0, i) + arrStr + decl.slice(i);\n    }\n    const spec = this.spec();\n    if (decl) {\n      return spec + ' ' + decl;\n    }\n    return spec;\n  }\n\n  private parseType(type: string) {\n    const parts = type.split(' ');\n    // primitive\n    const prim = parts[0];\n    let primType: PrimType = STR_TO_PRIM[prim];\n    if (primType !== undefined) {\n      this.primitive = primType;\n      this.structName = undefined;\n    } else {\n      this.primitive = PrimType.Struct;\n      this.structName = prim;\n    }\n    // declaration\n    if (parts.length == 2) {\n      this.declaration = parts[1];\n    } else {\n      this.declaration = undefined;\n    }\n  }\n}\n\n/** Represents struct var entries */\nclass GameRelVar extends GameVar {\n  offset!: number;\n\n  constructor(entry: DictEntry) {\n    super(entry);\n    this.offset = parseInt(entry[KEY_OFF] as string)\n  }\n\n  override sortValue(): number {\n    return this.offset;\n  }\n\n  /** Returns the address of this field in item 0 */\n  getOffsetToolTip(parentAddr: number): string {\n    return 'Address: ' + toHex(parentAddr + this.offset);\n  }\n}\n\n//** Represents ram and data entries */\nclass GameData extends GameVar {\n  addr!: number;\n\n  constructor(entry: DictEntry) {\n    super(entry);\n    this.addr = parseInt(entry[KEY_ADDR] as string)\n  }\n\n  override sortValue(): number {\n    return this.addr;\n  }\n}\n\nclass GameCode extends GameEntry {\n  desc!: string;\n  label!: string;\n  addr!: number;\n  size!: number;\n  mode!: string;\n  params?: GameVar[];\n  return?: GameVar;\n  notes?: string;\n\n  constructor(entry: DictEntry) {\n    super();\n    this.desc = entry[KEY_DESC] as string;\n    this.label = entry[KEY_LABEL] as string;\n    this.addr = parseInt(entry[KEY_ADDR] as string);\n    this.size = parseInt(entry[KEY_SIZE] as string);\n    this.mode = STR_TO_MODE[entry[KEY_MODE] as string];\n    const params = entry[KEY_PARAMS] as DictEntry[];\n    this.params = params?.map(p => new GameVar(p));\n    const ret = entry[KEY_RET] as DictEntry;\n    this.return = ret ? new GameVar(ret) : undefined;\n    this.notes = entry[KEY_NOTES] as string;\n  }\n\n  override sortValue(): number {\n    return this.addr;\n  }\n\n  /** Returns where the function ends */\n  getToolTip(): string {\n    const funcEnd = this.addr + this.size - 1;\n    return 'Ends at ' + toHex(funcEnd);\n  }\n\n  getParams(): string {\n    return '';\n  }\n\n  getReturn(): string {\n    return '';\n  }\n}\n\nclass GameEnumVal extends GameEntry {\n  desc!: string;\n  label!: string;\n  val!: number;\n  notes?: string;\n\n  constructor(entry: DictEntry) {\n    super();\n    this.desc = entry[KEY_DESC] as string;\n    this.label = entry[KEY_LABEL] as string;\n    this.val = parseInt(entry[KEY_VAL] as string);\n    this.notes = entry[KEY_NOTES] as string;\n  }\n\n  override sortValue(): number {\n    return this.val;\n  }\n}\n\nclass GameEnum extends GameEntry {\n  vals!: GameEnumVal[];\n\n  constructor(entry: DictEntry) {\n    super();\n    this.vals = (entry['vals'] as DictEntry[]).map(v => new GameEnumVal(v));\n  }\n}\n\nclass GameStruct extends GameEntry {\n  size!: number;\n  vars!: GameRelVar[];\n\n  constructor(entry: DictEntry) {\n    super();\n    this.size = parseInt(entry[KEY_SIZE] as string);\n    this.vars = (entry['vars'] as DictEntry[]).map(v => new GameRelVar(v));\n  }\n}\n\ntype GameStructList = { [key: string]: GameStruct };\ntype GameEnumList = { [key: string]: GameEnum };\n"]}